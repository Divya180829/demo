B1

docker build -t my-java-app .

docker run my-java-app


B2

Go to Jenkins and configure docker plug-ins.

Install,
1. Docker
2. Docker Compose Build Step
3. CloudBees Docker Custom Build EnvironmentVersion1.7.3
Make sure that these three plug-in must be installed.

4. Select as Pipleline project
Go to project configuration add pipeline script under “Advanced project Options”
paste the below code and make the necessary changes

pipeline {
    agent any

    environment {
        dockerImage = ''
        registry = 'hshpdvvce/yourimagename'
        registryCredential = 'jenkins_docker_token'         
        gitRepo = 'https://github.com/yourgithubusername/yourrepository.git'  
    }

    stages {

        stage('Checkout') {
            steps {
                // Pull code from your GitHub repo
                checkout scmGit(
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: "${gitRepo}"]]
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    dockerImage = docker.build("${registry}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub
                    docker.withRegistry('', registryCredential) {
                        // Push the image
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Clean up') {
            steps {
                script {
                    // Remove image from Jenkins node to save space
                    sh "docker rmi ${registry}:latest || true"
                }
            }
        }
    }
}




















[Create a process to dockerize the image for mysql database, demonstrate the working of
client and server model using docker.]

1. Run docker desktop application.

2. Go to command prompt and search mysql image in hub.

3. Pull the image from hub. <docker pull mysql>
    check it <docker images>

4. Run the image
    <docker run mysql>

5. Configure password form mysql server
    <docker run -e MYSQL_ROOT_PASSWORD=root123 -d mysql>


6. Open another tab run client using linux command.    
    <docker run -it mysql/bin/bash>

7. Required ip address of server to login from clinet. Inspec the server model.
    <docker container ls>

8. Inspect contianer based on names
    <docker inspect quirky_euclid>

9. Note down the server ip address and in client enter in to server 
    <docker inspect mysql>

10. Logged in from client.
    <mysql -h <server_ip_address> -u root -p>    